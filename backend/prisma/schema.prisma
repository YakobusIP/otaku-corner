generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [citext]
}

enum ProgressStatus {
  PLANNED
  ON_HOLD
  ON_PROGRESS
  COMPLETED
  DROPPED
}

enum ErrorType {
  WARN
  ERROR
}

enum QueueStatus {
  QUEUED
  COMPLETED
  FAILED
}

model Anime {
  id            Int      @id
  slug          String   @unique
  type          String
  status        String
  rating        String
  season        String?
  title         String
  titleJapanese String
  titleSynonyms String
  source        String
  aired         String
  broadcast     String
  episodesCount Int?
  duration      String
  score         Float?
  images        Json
  synopsis      String
  trailer       String?
  malUrl        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  genres   AnimeGenres[]
  studios  AnimeStudios[]
  themes   AnimeThemes[]
  episodes AnimeEpisode[]
  review   AnimeReview?
}

model AnimeEpisode {
  id            Int     @id @default(autoincrement())
  aired         String
  number        Int
  title         String
  titleJapanese String?
  titleRomaji   String?

  anime   Anime @relation(fields: [animeId], references: [id], onDelete: Cascade)
  animeId Int
}

model AnimeReview {
  id                    Int            @id @default(autoincrement())
  reviewText            String?
  storylineRating       Int?
  qualityRating         Int?
  voiceActingRating     Int?
  soundTrackRating      Int?
  charDevelopmentRating Int?
  personalScore         Float?
  progressStatus        ProgressStatus @default(PLANNED)
  consumedAt            DateTime?      @db.Date
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  reviewImages ReviewImage[] @relation("AnimeReviewImages")
  anime        Anime         @relation(fields: [animeId], references: [id], onDelete: Cascade)
  animeId      Int           @unique
}

model Manga {
  id            Int      @id
  slug          String   @unique
  status        String
  title         String
  titleJapanese String
  titleSynonyms String
  published     String
  chaptersCount Int?
  volumesCount  Int?
  score         Float?
  images        Json
  synopsis      String
  malUrl        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  authors MangaAuthors[]
  genres  MangaGenres[]
  themes  MangaThemes[]
  review  MangaReview?
}

model MangaReview {
  id                    Int            @id @default(autoincrement())
  reviewText            String?
  storylineRating       Int?
  artStyleRating        Int?
  charDevelopmentRating Int?
  worldBuildingRating   Int?
  originalityRating     Int?
  personalScore         Float?
  progressStatus        ProgressStatus @default(PLANNED)
  consumedAt            DateTime?      @db.Date
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  reviewImages ReviewImage[] @relation("MangaReviewImages")
  manga        Manga         @relation(fields: [mangaId], references: [id], onDelete: Cascade)
  mangaId      Int           @unique
}

model LightNovel {
  id            Int      @id
  slug          String   @unique
  status        String
  title         String
  titleJapanese String
  titleSynonyms String
  published     String
  volumesCount  Int?
  score         Float?
  images        Json
  synopsis      String
  malUrl        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  authors        LightNovelAuthors[]
  genres         LightNovelGenres[]
  themes         LightNovelThemes[]
  volumeProgress LightNovelVolumes[]
  review         LightNovelReview?
}

model LightNovelReview {
  id                    Int            @id @default(autoincrement())
  reviewText            String?
  storylineRating       Int?
  worldBuildingRating   Int?
  writingStyleRating    Int?
  charDevelopmentRating Int?
  originalityRating     Int?
  personalScore         Float?
  progressStatus        ProgressStatus @default(PLANNED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviewImages ReviewImage[] @relation("LightNovelReviewImages")
  lightNovel   LightNovel    @relation(fields: [lightNovelId], references: [id], onDelete: Cascade)
  lightNovelId Int           @unique
}

model LightNovelVolumes {
  id           Int        @id @default(autoincrement())
  volumeNumber Int
  consumedAt   DateTime?  @db.Date
  lightNovel   LightNovel @relation(fields: [lightNovelId], references: [id], onDelete: Cascade)
  lightNovelId Int

  @@unique([volumeNumber, lightNovelId])
}

model Genre {
  id          Int                @id @default(autoincrement())
  name        String             @unique @db.Citext
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  animes      AnimeGenres[]
  mangas      MangaGenres[]
  lightNovels LightNovelGenres[]
}

model Studio {
  id        Int            @id @default(autoincrement())
  name      String         @unique @db.Citext
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  animes    AnimeStudios[]
}

model Theme {
  id          Int                @id @default(autoincrement())
  name        String             @unique @db.Citext
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  animes      AnimeThemes[]
  mangas      MangaThemes[]
  lightNovels LightNovelThemes[]
}

model Author {
  id          Int                 @id @default(autoincrement())
  name        String              @unique @db.Citext
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  mangas      MangaAuthors[]
  lightNovels LightNovelAuthors[]
}

model AnimeGenres {
  anime   Anime @relation(fields: [animeId], references: [id], onDelete: Cascade)
  animeId Int
  genre   Genre @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId Int

  @@id([animeId, genreId])
}

model MangaGenres {
  manga   Manga @relation(fields: [mangaId], references: [id], onDelete: Cascade)
  mangaId Int
  genre   Genre @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId Int

  @@id([mangaId, genreId])
}

model LightNovelGenres {
  lightNovel   LightNovel @relation(fields: [lightNovelId], references: [id], onDelete: Cascade)
  lightNovelId Int
  genre        Genre      @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId      Int

  @@id([lightNovelId, genreId])
}

model AnimeStudios {
  anime    Anime  @relation(fields: [animeId], references: [id], onDelete: Cascade)
  animeId  Int
  studio   Studio @relation(fields: [studioId], references: [id], onDelete: Cascade)
  studioId Int

  @@id([animeId, studioId])
}

model AnimeThemes {
  anime   Anime @relation(fields: [animeId], references: [id], onDelete: Cascade)
  animeId Int
  theme   Theme @relation(fields: [themeId], references: [id], onDelete: Cascade)
  themeId Int

  @@id([animeId, themeId])
}

model MangaThemes {
  manga   Manga @relation(fields: [mangaId], references: [id], onDelete: Cascade)
  mangaId Int
  theme   Theme @relation(fields: [themeId], references: [id], onDelete: Cascade)
  themeId Int

  @@id([mangaId, themeId])
}

model LightNovelThemes {
  lightNovel   LightNovel @relation(fields: [lightNovelId], references: [id], onDelete: Cascade)
  lightNovelId Int
  theme        Theme      @relation(fields: [themeId], references: [id], onDelete: Cascade)
  themeId      Int

  @@id([lightNovelId, themeId])
}

model MangaAuthors {
  manga    Manga  @relation(fields: [mangaId], references: [id], onDelete: Cascade)
  mangaId  Int
  author   Author @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int

  @@id([mangaId, authorId])
}

model LightNovelAuthors {
  lightNovel   LightNovel @relation(fields: [lightNovelId], references: [id], onDelete: Cascade)
  lightNovelId Int
  author       Author     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     Int

  @@id([lightNovelId, authorId])
}

model AdminPin {
  id        Int      @id @default(autoincrement())
  pin1      String
  pin2      String
  createdAt DateTime @default(now())
}

model ReviewImage {
  id        String   @id @default(uuid())
  url       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  animeReview   AnimeReview? @relation("AnimeReviewImages", fields: [animeReviewId], references: [id], onDelete: Cascade)
  animeReviewId Int?

  mangaReview   MangaReview? @relation("MangaReviewImages", fields: [mangaReviewId], references: [id], onDelete: Cascade)
  mangaReviewId Int?

  lightNovelReview   LightNovelReview? @relation("LightNovelReviewImages", fields: [lightNovelReviewId], references: [id], onDelete: Cascade)
  lightNovelReviewId Int?
}

model RequestLog {
  id        Int      @id @default(autoincrement())
  hostname  String
  ip        String?
  method    String
  url       String
  headers   Json
  body      Json
  status    Int
  response  Json?
  timestamp DateTime @default(now())
}

model ErrorLog {
  id         Int       @id @default(autoincrement())
  message    String
  type       ErrorType
  statusCode Int?
  stack      String?
  route      String
  timestamp  DateTime  @default(now())
}

model QueueLog {
  id          Int         @id @default(autoincrement())
  jobId       String      @unique
  queueName   String
  status      QueueStatus
  data        Json
  result      Json?
  error       String?
  timestamp   DateTime    @default(now())
  completedAt DateTime?
}
